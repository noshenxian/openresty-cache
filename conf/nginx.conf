worker_processes auto;
error_log logs/error.log info;
events {
    worker_connections 1024;
}

http {
    # 基本设置
    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;
    client_max_body_size 100m;

    # 添加DNS解析器配置 - 确保放在http块的顶部
    resolver 114.114.114.114 8.8.4.4 valid=300s ipv6=off;
    resolver_timeout 5s;
    
    # Lua模块路径
    lua_package_path "$prefix/lua/?.lua;$prefix/lua/lib/?.lua;;";
    lua_code_cache on;
    
    # 共享内存区域
    lua_shared_dict cache_metadata 50m;  # 从10m增加到50m
    lua_shared_dict cache_locks 1m;      # 用于分布式锁
    lua_shared_dict cache_stats 5m;      # 缓存统计信息
    lua_shared_dict miss_urls 5m;       # 存储未命中的URL
    
    # Redis连接池
    init_by_lua_block {
        require "resty.core"
        local redis_config = {
            host = "127.0.0.1",
            port = 6379,
            timeout = 1000,  -- 毫秒
            pool_size = 100,
            idle_timeout = 10000  -- 毫秒
        }
        -- 全局共享Redis配置
        _G.REDIS_CONFIG = redis_config
    }
    
    # 缓存服务器
    server {
        listen 8080;
        server_name localhost;
        
        # 默认设置缓存TTL变量，避免未初始化警告
        set $static_cache_ttl 3600;  # 默认1小时
        
        # 缓存处理入口
        location / {
            # 访问控制和缓存策略
            access_by_lua_file lua/cache/access.lua;
            
            # 内容处理
            content_by_lua_file lua/cache/handler.lua;
            
            # 响应头处理
            header_filter_by_lua_file lua/cache/header_filter.lua;
            
            # 响应体处理 - 添加body_filter指令
            body_filter_by_lua_file lua/cache/body_filter.lua;
            
            # 日志记录
            log_by_lua_file lua/cache/log.lua;
        }
        
        # 缓存API
        location /api/ {
            content_by_lua_file lua/api/router.lua;
        }
        
        # 缓存管理后台
        location /dashboard/ {
            alias /Users/sean/Desktop/openresty-cache/dashboard/;
            index index.html;
            try_files $uri $uri/ /dashboard/index.html;
        }
        
        # 静态资源
        location /static/ {
            alias /Users/sean/Desktop/openresty-cache/static/;
            expires 7d;
        }
    }
    
    # 添加一个新的服务器块用于缓存特定站点
    # 修改8081端口的server块中的静态资源location配置
    server {
        listen 8081;
        server_name cache.example.com;
        
        # 默认设置缓存TTL变量
        set $static_cache_ttl 3600;  # 默认1小时
        
        # 对于静态资源，设置更长的缓存时间但不改变代理逻辑
        location ~* \.(jpg|jpeg|png|gif|ico)$ {
            set $static_cache_ttl 604800;  # 7天
            
            # 访问控制和缓存策略
            access_by_lua_file lua/cache/site_cache_control.lua;
            
            # 代理设置
            proxy_set_header Host www.kaipuyun.cn;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # 直接代理到目标站点，不尝试本地文件
            proxy_pass https://www.kaipuyun.cn;
            
            # 响应头处理
            header_filter_by_lua_file lua/cache/header_filter.lua;
            
            # 响应体处理
            body_filter_by_lua_file lua/cache/body_filter.lua;
            
            # 日志记录
            log_by_lua_file lua/cache/log.lua;
        }
        
        location ~* \.(css|js)$ {
            set $static_cache_ttl 86400;  # 1天
            
            # 访问控制和缓存策略
            access_by_lua_file lua/cache/site_cache_control.lua;
            
            # 代理设置
            proxy_set_header Host www.kaipuyun.cn;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # 直接代理到目标站点，不尝试本地文件
            proxy_pass https://www.kaipuyun.cn;
            
            # 响应头处理
            header_filter_by_lua_file lua/cache/header_filter.lua;
            
            # 响应体处理
            body_filter_by_lua_file lua/cache/body_filter.lua;
            
            # 日志记录
            log_by_lua_file lua/cache/log.lua;
        }
        
        # 主location块也需要修改
        location / {
            # 访问控制和缓存策略
            access_by_lua_file lua/cache/site_cache_control.lua;
            
            # 代理设置
            proxy_set_header Host www.kaipuyun.cn;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # 直接代理到目标站点，不使用条件判断
            proxy_pass https://www.kaipuyun.cn;
            
            # 响应头处理
            header_filter_by_lua_file lua/cache/header_filter.lua;
            
            # 响应体处理
            body_filter_by_lua_file lua/cache/body_filter.lua;
            
            # 日志记录
            log_by_lua_file lua/cache/log.lua;
        }
    }
}